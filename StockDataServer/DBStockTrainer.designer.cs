#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StockDataServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StockTrainer")]
	public partial class DBStockTrainerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertInsiderTrade(InsiderTrade instance);
    partial void UpdateInsiderTrade(InsiderTrade instance);
    partial void DeleteInsiderTrade(InsiderTrade instance);
    partial void InsertPortfolio(Portfolio instance);
    partial void UpdatePortfolio(Portfolio instance);
    partial void DeletePortfolio(Portfolio instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertWatchStock(WatchStock instance);
    partial void UpdateWatchStock(WatchStock instance);
    partial void DeleteWatchStock(WatchStock instance);
    #endregion
		
		public DBStockTrainerDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["StockTrainerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBStockTrainerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBStockTrainerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBStockTrainerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBStockTrainerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<InsiderTrade> InsiderTrades
		{
			get
			{
				return this.GetTable<InsiderTrade>();
			}
		}
		
		public System.Data.Linq.Table<Portfolio> Portfolios
		{
			get
			{
				return this.GetTable<Portfolio>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stocks
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<WatchStock> WatchStocks
		{
			get
			{
				return this.GetTable<WatchStock>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Password;
		
		private double _Investment;
		
		private double _AvailableCash;
		
		private long _TotalTrans;
		
		private long _PositiveTrans;
		
		private long _NegativeTrans;
		
		private EntitySet<Portfolio> _Portfolios;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntitySet<WatchStock> _WatchStocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnInvestmentChanging(double value);
    partial void OnInvestmentChanged();
    partial void OnAvailableCashChanging(double value);
    partial void OnAvailableCashChanged();
    partial void OnTotalTransChanging(long value);
    partial void OnTotalTransChanged();
    partial void OnPositiveTransChanging(long value);
    partial void OnPositiveTransChanged();
    partial void OnNegativeTransChanging(long value);
    partial void OnNegativeTransChanged();
    #endregion
		
		public Account()
		{
			this._Portfolios = new EntitySet<Portfolio>(new Action<Portfolio>(this.attach_Portfolios), new Action<Portfolio>(this.detach_Portfolios));
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._WatchStocks = new EntitySet<WatchStock>(new Action<WatchStock>(this.attach_WatchStocks), new Action<WatchStock>(this.detach_WatchStocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Investment", DbType="Float NOT NULL")]
		public double Investment
		{
			get
			{
				return this._Investment;
			}
			set
			{
				if ((this._Investment != value))
				{
					this.OnInvestmentChanging(value);
					this.SendPropertyChanging();
					this._Investment = value;
					this.SendPropertyChanged("Investment");
					this.OnInvestmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableCash", DbType="Float NOT NULL")]
		public double AvailableCash
		{
			get
			{
				return this._AvailableCash;
			}
			set
			{
				if ((this._AvailableCash != value))
				{
					this.OnAvailableCashChanging(value);
					this.SendPropertyChanging();
					this._AvailableCash = value;
					this.SendPropertyChanged("AvailableCash");
					this.OnAvailableCashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTrans", DbType="BigInt NOT NULL")]
		public long TotalTrans
		{
			get
			{
				return this._TotalTrans;
			}
			set
			{
				if ((this._TotalTrans != value))
				{
					this.OnTotalTransChanging(value);
					this.SendPropertyChanging();
					this._TotalTrans = value;
					this.SendPropertyChanged("TotalTrans");
					this.OnTotalTransChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositiveTrans", DbType="BigInt NOT NULL")]
		public long PositiveTrans
		{
			get
			{
				return this._PositiveTrans;
			}
			set
			{
				if ((this._PositiveTrans != value))
				{
					this.OnPositiveTransChanging(value);
					this.SendPropertyChanging();
					this._PositiveTrans = value;
					this.SendPropertyChanged("PositiveTrans");
					this.OnPositiveTransChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NegativeTrans", DbType="BigInt NOT NULL")]
		public long NegativeTrans
		{
			get
			{
				return this._NegativeTrans;
			}
			set
			{
				if ((this._NegativeTrans != value))
				{
					this.OnNegativeTransChanging(value);
					this.SendPropertyChanging();
					this._NegativeTrans = value;
					this.SendPropertyChanged("NegativeTrans");
					this.OnNegativeTransChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Portfolio", Storage="_Portfolios", ThisKey="Username", OtherKey="Username")]
		public EntitySet<Portfolio> Portfolios
		{
			get
			{
				return this._Portfolios;
			}
			set
			{
				this._Portfolios.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Transaction", Storage="_Transactions", ThisKey="Username", OtherKey="Username")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_WatchStock", Storage="_WatchStocks", ThisKey="Username", OtherKey="Username")]
		public EntitySet<WatchStock> WatchStocks
		{
			get
			{
				return this._WatchStocks;
			}
			set
			{
				this._WatchStocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Portfolios(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Portfolios(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_WatchStocks(WatchStock entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_WatchStocks(WatchStock entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InsiderTrades")]
	public partial class InsiderTrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _InsiderTradeID;
		
		private string _Ticker;
		
		private string _InsiderDetail;
		
		private string _CompanyName;
		
		private string _Type;
		
		private long _Quantity;
		
		private double _Price;
		
		private double _Total;
		
		private System.DateTime _Time;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInsiderTradeIDChanging(long value);
    partial void OnInsiderTradeIDChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnInsiderDetailChanging(string value);
    partial void OnInsiderDetailChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnQuantityChanging(long value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnTotalChanging(double value);
    partial void OnTotalChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
		
		public InsiderTrade()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsiderTradeID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long InsiderTradeID
		{
			get
			{
				return this._InsiderTradeID;
			}
			set
			{
				if ((this._InsiderTradeID != value))
				{
					this.OnInsiderTradeIDChanging(value);
					this.SendPropertyChanging();
					this._InsiderTradeID = value;
					this.SendPropertyChanged("InsiderTradeID");
					this.OnInsiderTradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsiderDetail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string InsiderDetail
		{
			get
			{
				return this._InsiderDetail;
			}
			set
			{
				if ((this._InsiderDetail != value))
				{
					this.OnInsiderDetailChanging(value);
					this.SendPropertyChanging();
					this._InsiderDetail = value;
					this.SendPropertyChanged("InsiderDetail");
					this.OnInsiderDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="BigInt NOT NULL")]
		public long Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Float NOT NULL")]
		public double Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Portfolio")]
	public partial class Portfolio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Ticker;
		
		private double _Cost;
		
		private long _Num;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnCostChanging(double value);
    partial void OnCostChanged();
    partial void OnNumChanging(long value);
    partial void OnNumChanged();
    #endregion
		
		public Portfolio()
		{
			this._Account = default(EntityRef<Account>);
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Float NOT NULL")]
		public double Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Num", DbType="BigInt NOT NULL")]
		public long Num
		{
			get
			{
				return this._Num;
			}
			set
			{
				if ((this._Num != value))
				{
					this.OnNumChanging(value);
					this.SendPropertyChanging();
					this._Num = value;
					this.SendPropertyChanged("Num");
					this.OnNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Portfolio", Storage="_Account", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Portfolios.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Portfolios.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_Portfolio", Storage="_Stock", ThisKey="Ticker", OtherKey="Ticker", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.Portfolios.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.Portfolios.Add(this);
						this._Ticker = value.Ticker;
					}
					else
					{
						this._Ticker = default(string);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stock")]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Ticker;
		
		private string _Name;
		
		private double _Price;
		
		private double _PrevClosePrice;
		
		private EntitySet<Portfolio> _Portfolios;
		
		private EntitySet<WatchStock> _WatchStocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnPrevClosePriceChanging(double value);
    partial void OnPrevClosePriceChanged();
    #endregion
		
		public Stock()
		{
			this._Portfolios = new EntitySet<Portfolio>(new Action<Portfolio>(this.attach_Portfolios), new Action<Portfolio>(this.detach_Portfolios));
			this._WatchStocks = new EntitySet<WatchStock>(new Action<WatchStock>(this.attach_WatchStocks), new Action<WatchStock>(this.detach_WatchStocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrevClosePrice", DbType="Float NOT NULL")]
		public double PrevClosePrice
		{
			get
			{
				return this._PrevClosePrice;
			}
			set
			{
				if ((this._PrevClosePrice != value))
				{
					this.OnPrevClosePriceChanging(value);
					this.SendPropertyChanging();
					this._PrevClosePrice = value;
					this.SendPropertyChanged("PrevClosePrice");
					this.OnPrevClosePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_Portfolio", Storage="_Portfolios", ThisKey="Ticker", OtherKey="Ticker")]
		public EntitySet<Portfolio> Portfolios
		{
			get
			{
				return this._Portfolios;
			}
			set
			{
				this._Portfolios.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_WatchStock", Storage="_WatchStocks", ThisKey="Ticker", OtherKey="Ticker")]
		public EntitySet<WatchStock> WatchStocks
		{
			get
			{
				return this._WatchStocks;
			}
			set
			{
				this._WatchStocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Portfolios(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_Portfolios(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_WatchStocks(WatchStock entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_WatchStocks(WatchStock entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TransactionID;
		
		private string _Username;
		
		private string _Ticker;
		
		private string _Name;
		
		private System.DateTime _Date;
		
		private string _Type;
		
		private long _Num;
		
		private double _Price;
		
		private double _AvrBuyPrice;
		
		private System.Nullable<double> _GainLossMoney;
		
		private System.Nullable<double> _GainLossLPercent;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(long value);
    partial void OnTransactionIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnNumChanging(long value);
    partial void OnNumChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnAvrBuyPriceChanging(double value);
    partial void OnAvrBuyPriceChanged();
    partial void OnGainLossMoneyChanging(System.Nullable<double> value);
    partial void OnGainLossMoneyChanged();
    partial void OnGainLossLPercentChanging(System.Nullable<double> value);
    partial void OnGainLossLPercentChanged();
    #endregion
		
		public Transaction()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Num", DbType="BigInt NOT NULL")]
		public long Num
		{
			get
			{
				return this._Num;
			}
			set
			{
				if ((this._Num != value))
				{
					this.OnNumChanging(value);
					this.SendPropertyChanging();
					this._Num = value;
					this.SendPropertyChanged("Num");
					this.OnNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvrBuyPrice", DbType="Float NOT NULL")]
		public double AvrBuyPrice
		{
			get
			{
				return this._AvrBuyPrice;
			}
			set
			{
				if ((this._AvrBuyPrice != value))
				{
					this.OnAvrBuyPriceChanging(value);
					this.SendPropertyChanging();
					this._AvrBuyPrice = value;
					this.SendPropertyChanged("AvrBuyPrice");
					this.OnAvrBuyPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GainLossMoney", DbType="Float")]
		public System.Nullable<double> GainLossMoney
		{
			get
			{
				return this._GainLossMoney;
			}
			set
			{
				if ((this._GainLossMoney != value))
				{
					this.OnGainLossMoneyChanging(value);
					this.SendPropertyChanging();
					this._GainLossMoney = value;
					this.SendPropertyChanged("GainLossMoney");
					this.OnGainLossMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GainLossLPercent", DbType="Float")]
		public System.Nullable<double> GainLossLPercent
		{
			get
			{
				return this._GainLossLPercent;
			}
			set
			{
				if ((this._GainLossLPercent != value))
				{
					this.OnGainLossLPercentChanging(value);
					this.SendPropertyChanging();
					this._GainLossLPercent = value;
					this.SendPropertyChanged("GainLossLPercent");
					this.OnGainLossLPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Transaction", Storage="_Account", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WatchStock")]
	public partial class WatchStock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Ticker;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    #endregion
		
		public WatchStock()
		{
			this._Account = default(EntityRef<Account>);
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_WatchStock", Storage="_Account", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.WatchStocks.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.WatchStocks.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_WatchStock", Storage="_Stock", ThisKey="Ticker", OtherKey="Ticker", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.WatchStocks.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.WatchStocks.Add(this);
						this._Ticker = value.Ticker;
					}
					else
					{
						this._Ticker = default(string);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
