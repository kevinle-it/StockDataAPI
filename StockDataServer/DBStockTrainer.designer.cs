#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StockDataServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StockTrainer")]
	public partial class DBStockTrainerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    partial void InsertInsiderTrade(InsiderTrade instance);
    partial void UpdateInsiderTrade(InsiderTrade instance);
    partial void DeleteInsiderTrade(InsiderTrade instance);
    partial void InsertPortfolio(Portfolio instance);
    partial void UpdatePortfolio(Portfolio instance);
    partial void DeletePortfolio(Portfolio instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertWatchStock(WatchStock instance);
    partial void UpdateWatchStock(WatchStock instance);
    partial void DeleteWatchStock(WatchStock instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    #endregion
		
		public DBStockTrainerDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["StockTrainerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBStockTrainerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBStockTrainerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBStockTrainerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBStockTrainerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<History> Histories
		{
			get
			{
				return this.GetTable<History>();
			}
		}
		
		public System.Data.Linq.Table<InsiderTrade> InsiderTrades
		{
			get
			{
				return this.GetTable<InsiderTrade>();
			}
		}
		
		public System.Data.Linq.Table<Portfolio> Portfolios
		{
			get
			{
				return this.GetTable<Portfolio>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stocks
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<WatchStock> WatchStocks
		{
			get
			{
				return this.GetTable<WatchStock>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.History")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Ticker;
		
		private System.DateTime _Time;
		
		private decimal _HistoryPrice;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnHistoryPriceChanging(decimal value);
    partial void OnHistoryPriceChanged();
    #endregion
		
		public History()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HistoryPrice", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public decimal HistoryPrice
		{
			get
			{
				return this._HistoryPrice;
			}
			set
			{
				if ((this._HistoryPrice != value))
				{
					this.OnHistoryPriceChanging(value);
					this.SendPropertyChanging();
					this._HistoryPrice = value;
					this.SendPropertyChanged("HistoryPrice");
					this.OnHistoryPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_History", Storage="_Stock", ThisKey="Ticker", OtherKey="Ticker", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._Ticker = value.Ticker;
					}
					else
					{
						this._Ticker = default(string);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InsiderTrade")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class InsiderTrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _InsiderTradeID;
		
		private string _Ticker;
		
		private string _InsiderDetail;
		
		private string _CompanyName;
		
		private string _Type;
		
		private long _Quantity;
		
		private decimal _Price;
		
		private long _Total;
		
		private System.DateTime _Time;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInsiderTradeIDChanging(long value);
    partial void OnInsiderTradeIDChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnInsiderDetailChanging(string value);
    partial void OnInsiderDetailChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnQuantityChanging(long value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnTotalChanging(long value);
    partial void OnTotalChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
		
		public InsiderTrade()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsiderTradeID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public long InsiderTradeID
		{
			get
			{
				return this._InsiderTradeID;
			}
			set
			{
				if ((this._InsiderTradeID != value))
				{
					this.OnInsiderTradeIDChanging(value);
					this.SendPropertyChanging();
					this._InsiderTradeID = value;
					this.SendPropertyChanged("InsiderTradeID");
					this.OnInsiderTradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsiderDetail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string InsiderDetail
		{
			get
			{
				return this._InsiderDetail;
			}
			set
			{
				if ((this._InsiderDetail != value))
				{
					this.OnInsiderDetailChanging(value);
					this.SendPropertyChanging();
					this._InsiderDetail = value;
					this.SendPropertyChanged("InsiderDetail");
					this.OnInsiderDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="BigInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public long Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="BigInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public long Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Portfolio")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Portfolio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Ticker;
		
		private decimal _Cost;
		
		private long _NumStocks;
		
		private EntityRef<Stock> _Stock;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnNumStocksChanging(long value);
    partial void OnNumStocksChanged();
    #endregion
		
		public Portfolio()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumStocks", DbType="BigInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public long NumStocks
		{
			get
			{
				return this._NumStocks;
			}
			set
			{
				if ((this._NumStocks != value))
				{
					this.OnNumStocksChanging(value);
					this.SendPropertyChanging();
					this._NumStocks = value;
					this.SendPropertyChanged("NumStocks");
					this.OnNumStocksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_Portfolio", Storage="_Stock", ThisKey="Ticker", OtherKey="Ticker", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.Portfolios.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.Portfolios.Add(this);
						this._Ticker = value.Ticker;
					}
					else
					{
						this._Ticker = default(string);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Portfolio", Storage="_Account", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Portfolios.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Portfolios.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Stock = default(EntityRef<Stock>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Settings")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Setting
	{
		
		private int _AutoUpdateTimer;
		
		private bool _EnforceMarketTimings;
		
		public Setting()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoUpdateTimer", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int AutoUpdateTimer
		{
			get
			{
				return this._AutoUpdateTimer;
			}
			set
			{
				if ((this._AutoUpdateTimer != value))
				{
					this._AutoUpdateTimer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnforceMarketTimings", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public bool EnforceMarketTimings
		{
			get
			{
				return this._EnforceMarketTimings;
			}
			set
			{
				if ((this._EnforceMarketTimings != value))
				{
					this._EnforceMarketTimings = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stock")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Ticker;
		
		private string _EquityName;
		
		private decimal _Price;
		
		private decimal _PrevClosePrice;
		
		private decimal _HighPrice;
		
		private decimal _LowPrice;
		
		private decimal _OpenPrice;
		
		private long _Volume;
		
		private decimal _Change;
		
		private long _MarketCap;
		
		private decimal @__52_week_High;
		
		private decimal @__52_week_Low;
		
		private decimal _AskPrice;
		
		private decimal _BidPrice;
		
		private long _AskSize;
		
		private long _BidSize;
		
		private int _UpdateChecker;
		
		private EntitySet<History> _Histories;
		
		private EntitySet<Portfolio> _Portfolios;
		
		private EntitySet<WatchStock> _WatchStocks;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnEquityNameChanging(string value);
    partial void OnEquityNameChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnPrevClosePriceChanging(decimal value);
    partial void OnPrevClosePriceChanged();
    partial void OnHighPriceChanging(decimal value);
    partial void OnHighPriceChanged();
    partial void OnLowPriceChanging(decimal value);
    partial void OnLowPriceChanged();
    partial void OnOpenPriceChanging(decimal value);
    partial void OnOpenPriceChanged();
    partial void OnVolumeChanging(long value);
    partial void OnVolumeChanged();
    partial void OnChangeChanging(decimal value);
    partial void OnChangeChanged();
    partial void OnMarketCapChanging(long value);
    partial void OnMarketCapChanged();
    partial void On_52_week_HighChanging(decimal value);
    partial void On_52_week_HighChanged();
    partial void On_52_week_LowChanging(decimal value);
    partial void On_52_week_LowChanged();
    partial void OnAskPriceChanging(decimal value);
    partial void OnAskPriceChanged();
    partial void OnBidPriceChanging(decimal value);
    partial void OnBidPriceChanged();
    partial void OnAskSizeChanging(long value);
    partial void OnAskSizeChanged();
    partial void OnBidSizeChanging(long value);
    partial void OnBidSizeChanged();
    partial void OnUpdateCheckerChanging(int value);
    partial void OnUpdateCheckerChanged();
    #endregion
		
		public Stock()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquityName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string EquityName
		{
			get
			{
				return this._EquityName;
			}
			set
			{
				if ((this._EquityName != value))
				{
					this.OnEquityNameChanging(value);
					this.SendPropertyChanging();
					this._EquityName = value;
					this.SendPropertyChanged("EquityName");
					this.OnEquityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrevClosePrice", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public decimal PrevClosePrice
		{
			get
			{
				return this._PrevClosePrice;
			}
			set
			{
				if ((this._PrevClosePrice != value))
				{
					this.OnPrevClosePriceChanging(value);
					this.SendPropertyChanging();
					this._PrevClosePrice = value;
					this.SendPropertyChanged("PrevClosePrice");
					this.OnPrevClosePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighPrice", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public decimal HighPrice
		{
			get
			{
				return this._HighPrice;
			}
			set
			{
				if ((this._HighPrice != value))
				{
					this.OnHighPriceChanging(value);
					this.SendPropertyChanging();
					this._HighPrice = value;
					this.SendPropertyChanged("HighPrice");
					this.OnHighPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowPrice", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public decimal LowPrice
		{
			get
			{
				return this._LowPrice;
			}
			set
			{
				if ((this._LowPrice != value))
				{
					this.OnLowPriceChanging(value);
					this.SendPropertyChanging();
					this._LowPrice = value;
					this.SendPropertyChanged("LowPrice");
					this.OnLowPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenPrice", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public decimal OpenPrice
		{
			get
			{
				return this._OpenPrice;
			}
			set
			{
				if ((this._OpenPrice != value))
				{
					this.OnOpenPriceChanging(value);
					this.SendPropertyChanging();
					this._OpenPrice = value;
					this.SendPropertyChanged("OpenPrice");
					this.OnOpenPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="BigInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public long Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Change", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public decimal Change
		{
			get
			{
				return this._Change;
			}
			set
			{
				if ((this._Change != value))
				{
					this.OnChangeChanging(value);
					this.SendPropertyChanging();
					this._Change = value;
					this.SendPropertyChanged("Change");
					this.OnChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketCap", DbType="BigInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10)]
		public long MarketCap
		{
			get
			{
				return this._MarketCap;
			}
			set
			{
				if ((this._MarketCap != value))
				{
					this.OnMarketCapChanging(value);
					this.SendPropertyChanging();
					this._MarketCap = value;
					this.SendPropertyChanged("MarketCap");
					this.OnMarketCapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[52-week_High]", Storage="__52_week_High", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11)]
		public decimal _52_week_High
		{
			get
			{
				return this.@__52_week_High;
			}
			set
			{
				if ((this.@__52_week_High != value))
				{
					this.On_52_week_HighChanging(value);
					this.SendPropertyChanging();
					this.@__52_week_High = value;
					this.SendPropertyChanged("_52_week_High");
					this.On_52_week_HighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[52-week_Low]", Storage="__52_week_Low", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12)]
		public decimal _52_week_Low
		{
			get
			{
				return this.@__52_week_Low;
			}
			set
			{
				if ((this.@__52_week_Low != value))
				{
					this.On_52_week_LowChanging(value);
					this.SendPropertyChanging();
					this.@__52_week_Low = value;
					this.SendPropertyChanged("_52_week_Low");
					this.On_52_week_LowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AskPrice", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13)]
		public decimal AskPrice
		{
			get
			{
				return this._AskPrice;
			}
			set
			{
				if ((this._AskPrice != value))
				{
					this.OnAskPriceChanging(value);
					this.SendPropertyChanging();
					this._AskPrice = value;
					this.SendPropertyChanged("AskPrice");
					this.OnAskPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidPrice", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=14)]
		public decimal BidPrice
		{
			get
			{
				return this._BidPrice;
			}
			set
			{
				if ((this._BidPrice != value))
				{
					this.OnBidPriceChanging(value);
					this.SendPropertyChanging();
					this._BidPrice = value;
					this.SendPropertyChanged("BidPrice");
					this.OnBidPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AskSize", DbType="BigInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=15)]
		public long AskSize
		{
			get
			{
				return this._AskSize;
			}
			set
			{
				if ((this._AskSize != value))
				{
					this.OnAskSizeChanging(value);
					this.SendPropertyChanging();
					this._AskSize = value;
					this.SendPropertyChanged("AskSize");
					this.OnAskSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidSize", DbType="BigInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=16)]
		public long BidSize
		{
			get
			{
				return this._BidSize;
			}
			set
			{
				if ((this._BidSize != value))
				{
					this.OnBidSizeChanging(value);
					this.SendPropertyChanging();
					this._BidSize = value;
					this.SendPropertyChanged("BidSize");
					this.OnBidSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateChecker", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=17)]
		public int UpdateChecker
		{
			get
			{
				return this._UpdateChecker;
			}
			set
			{
				if ((this._UpdateChecker != value))
				{
					this.OnUpdateCheckerChanging(value);
					this.SendPropertyChanging();
					this._UpdateChecker = value;
					this.SendPropertyChanged("UpdateChecker");
					this.OnUpdateCheckerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_History", Storage="_Histories", ThisKey="Ticker", OtherKey="Ticker")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=18, EmitDefaultValue=false)]
		public EntitySet<History> Histories
		{
			get
			{
				if ((this.serializing 
							&& (this._Histories.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_Portfolio", Storage="_Portfolios", ThisKey="Ticker", OtherKey="Ticker")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=19, EmitDefaultValue=false)]
		public EntitySet<Portfolio> Portfolios
		{
			get
			{
				if ((this.serializing 
							&& (this._Portfolios.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Portfolios;
			}
			set
			{
				this._Portfolios.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_WatchStock", Storage="_WatchStocks", ThisKey="Ticker", OtherKey="Ticker")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=20, EmitDefaultValue=false)]
		public EntitySet<WatchStock> WatchStocks
		{
			get
			{
				if ((this.serializing 
							&& (this._WatchStocks.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._WatchStocks;
			}
			set
			{
				this._WatchStocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_Portfolios(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_Portfolios(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_WatchStocks(WatchStock entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_WatchStocks(WatchStock entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void Initialize()
		{
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			this._Portfolios = new EntitySet<Portfolio>(new Action<Portfolio>(this.attach_Portfolios), new Action<Portfolio>(this.detach_Portfolios));
			this._WatchStocks = new EntitySet<WatchStock>(new Action<WatchStock>(this.attach_WatchStocks), new Action<WatchStock>(this.detach_WatchStocks));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Transaction]")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TransactionID;
		
		private string _Username;
		
		private string _Ticker;
		
		private string _EquityName;
		
		private System.DateTime _Date;
		
		private string _Type;
		
		private long _NumStocks;
		
		private decimal _Price;
		
		private System.Nullable<decimal> _GainLossMoney;
		
		private System.Nullable<decimal> _GainLossPercent;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(long value);
    partial void OnTransactionIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnEquityNameChanging(string value);
    partial void OnEquityNameChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnNumStocksChanging(long value);
    partial void OnNumStocksChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnGainLossMoneyChanging(System.Nullable<decimal> value);
    partial void OnGainLossMoneyChanged();
    partial void OnGainLossPercentChanging(System.Nullable<decimal> value);
    partial void OnGainLossPercentChanged();
    #endregion
		
		public Transaction()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public long TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquityName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string EquityName
		{
			get
			{
				return this._EquityName;
			}
			set
			{
				if ((this._EquityName != value))
				{
					this.OnEquityNameChanging(value);
					this.SendPropertyChanging();
					this._EquityName = value;
					this.SendPropertyChanged("EquityName");
					this.OnEquityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumStocks", DbType="BigInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public long NumStocks
		{
			get
			{
				return this._NumStocks;
			}
			set
			{
				if ((this._NumStocks != value))
				{
					this.OnNumStocksChanging(value);
					this.SendPropertyChanging();
					this._NumStocks = value;
					this.SendPropertyChanged("NumStocks");
					this.OnNumStocksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GainLossMoney", DbType="Decimal(20,2)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public System.Nullable<decimal> GainLossMoney
		{
			get
			{
				return this._GainLossMoney;
			}
			set
			{
				if ((this._GainLossMoney != value))
				{
					this.OnGainLossMoneyChanging(value);
					this.SendPropertyChanging();
					this._GainLossMoney = value;
					this.SendPropertyChanged("GainLossMoney");
					this.OnGainLossMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GainLossPercent", DbType="Decimal(20,2)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10)]
		public System.Nullable<decimal> GainLossPercent
		{
			get
			{
				return this._GainLossPercent;
			}
			set
			{
				if ((this._GainLossPercent != value))
				{
					this.OnGainLossPercentChanging(value);
					this.SendPropertyChanging();
					this._GainLossPercent = value;
					this.SendPropertyChanged("GainLossPercent");
					this.OnGainLossPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Transaction", Storage="_Account", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WatchStock")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class WatchStock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Ticker;
		
		private EntityRef<Stock> _Stock;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    #endregion
		
		public WatchStock()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_WatchStock", Storage="_Stock", ThisKey="Ticker", OtherKey="Ticker", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.WatchStocks.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.WatchStocks.Add(this);
						this._Ticker = value.Ticker;
					}
					else
					{
						this._Ticker = default(string);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_WatchStock", Storage="_Account", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.WatchStocks.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.WatchStocks.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Stock = default(EntityRef<Stock>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Password;
		
		private string _Fullname;
		
		private string _FirstSecurityQuestion;
		
		private string _FirstSecurityAnswer;
		
		private string _SecondSecurityQuestion;
		
		private string _SecondSecurityAnswer;
		
		private decimal _StartingInvestment;
		
		private decimal _StocksValue;
		
		private decimal _AvailableCash;
		
		private decimal _TotalValue;
		
		private decimal _Position;
		
		private long _TotalTrans;
		
		private long _PositiveTrans;
		
		private long _NegativeTrans;
		
		private EntitySet<Portfolio> _Portfolios;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntitySet<WatchStock> _WatchStocks;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnFirstSecurityQuestionChanging(string value);
    partial void OnFirstSecurityQuestionChanged();
    partial void OnFirstSecurityAnswerChanging(string value);
    partial void OnFirstSecurityAnswerChanged();
    partial void OnSecondSecurityQuestionChanging(string value);
    partial void OnSecondSecurityQuestionChanged();
    partial void OnSecondSecurityAnswerChanging(string value);
    partial void OnSecondSecurityAnswerChanged();
    partial void OnStartingInvestmentChanging(decimal value);
    partial void OnStartingInvestmentChanged();
    partial void OnStocksValueChanging(decimal value);
    partial void OnStocksValueChanged();
    partial void OnAvailableCashChanging(decimal value);
    partial void OnAvailableCashChanged();
    partial void OnTotalValueChanging(decimal value);
    partial void OnTotalValueChanged();
    partial void OnPositionChanging(decimal value);
    partial void OnPositionChanged();
    partial void OnTotalTransChanging(long value);
    partial void OnTotalTransChanged();
    partial void OnPositiveTransChanging(long value);
    partial void OnPositiveTransChanged();
    partial void OnNegativeTransChanging(long value);
    partial void OnNegativeTransChanged();
    #endregion
		
		public Account()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstSecurityQuestion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string FirstSecurityQuestion
		{
			get
			{
				return this._FirstSecurityQuestion;
			}
			set
			{
				if ((this._FirstSecurityQuestion != value))
				{
					this.OnFirstSecurityQuestionChanging(value);
					this.SendPropertyChanging();
					this._FirstSecurityQuestion = value;
					this.SendPropertyChanged("FirstSecurityQuestion");
					this.OnFirstSecurityQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstSecurityAnswer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string FirstSecurityAnswer
		{
			get
			{
				return this._FirstSecurityAnswer;
			}
			set
			{
				if ((this._FirstSecurityAnswer != value))
				{
					this.OnFirstSecurityAnswerChanging(value);
					this.SendPropertyChanging();
					this._FirstSecurityAnswer = value;
					this.SendPropertyChanged("FirstSecurityAnswer");
					this.OnFirstSecurityAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondSecurityQuestion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string SecondSecurityQuestion
		{
			get
			{
				return this._SecondSecurityQuestion;
			}
			set
			{
				if ((this._SecondSecurityQuestion != value))
				{
					this.OnSecondSecurityQuestionChanging(value);
					this.SendPropertyChanging();
					this._SecondSecurityQuestion = value;
					this.SendPropertyChanged("SecondSecurityQuestion");
					this.OnSecondSecurityQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondSecurityAnswer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public string SecondSecurityAnswer
		{
			get
			{
				return this._SecondSecurityAnswer;
			}
			set
			{
				if ((this._SecondSecurityAnswer != value))
				{
					this.OnSecondSecurityAnswerChanging(value);
					this.SendPropertyChanging();
					this._SecondSecurityAnswer = value;
					this.SendPropertyChanged("SecondSecurityAnswer");
					this.OnSecondSecurityAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingInvestment", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public decimal StartingInvestment
		{
			get
			{
				return this._StartingInvestment;
			}
			set
			{
				if ((this._StartingInvestment != value))
				{
					this.OnStartingInvestmentChanging(value);
					this.SendPropertyChanging();
					this._StartingInvestment = value;
					this.SendPropertyChanged("StartingInvestment");
					this.OnStartingInvestmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StocksValue", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public decimal StocksValue
		{
			get
			{
				return this._StocksValue;
			}
			set
			{
				if ((this._StocksValue != value))
				{
					this.OnStocksValueChanging(value);
					this.SendPropertyChanging();
					this._StocksValue = value;
					this.SendPropertyChanged("StocksValue");
					this.OnStocksValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableCash", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10)]
		public decimal AvailableCash
		{
			get
			{
				return this._AvailableCash;
			}
			set
			{
				if ((this._AvailableCash != value))
				{
					this.OnAvailableCashChanging(value);
					this.SendPropertyChanging();
					this._AvailableCash = value;
					this.SendPropertyChanged("AvailableCash");
					this.OnAvailableCashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalValue", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11)]
		public decimal TotalValue
		{
			get
			{
				return this._TotalValue;
			}
			set
			{
				if ((this._TotalValue != value))
				{
					this.OnTotalValueChanging(value);
					this.SendPropertyChanging();
					this._TotalValue = value;
					this.SendPropertyChanged("TotalValue");
					this.OnTotalValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Decimal(20,2) NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12)]
		public decimal Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTrans", DbType="BigInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13)]
		public long TotalTrans
		{
			get
			{
				return this._TotalTrans;
			}
			set
			{
				if ((this._TotalTrans != value))
				{
					this.OnTotalTransChanging(value);
					this.SendPropertyChanging();
					this._TotalTrans = value;
					this.SendPropertyChanged("TotalTrans");
					this.OnTotalTransChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositiveTrans", DbType="BigInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=14)]
		public long PositiveTrans
		{
			get
			{
				return this._PositiveTrans;
			}
			set
			{
				if ((this._PositiveTrans != value))
				{
					this.OnPositiveTransChanging(value);
					this.SendPropertyChanging();
					this._PositiveTrans = value;
					this.SendPropertyChanged("PositiveTrans");
					this.OnPositiveTransChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NegativeTrans", DbType="BigInt NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=15)]
		public long NegativeTrans
		{
			get
			{
				return this._NegativeTrans;
			}
			set
			{
				if ((this._NegativeTrans != value))
				{
					this.OnNegativeTransChanging(value);
					this.SendPropertyChanging();
					this._NegativeTrans = value;
					this.SendPropertyChanged("NegativeTrans");
					this.OnNegativeTransChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Portfolio", Storage="_Portfolios", ThisKey="Username", OtherKey="Username")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=16, EmitDefaultValue=false)]
		public EntitySet<Portfolio> Portfolios
		{
			get
			{
				if ((this.serializing 
							&& (this._Portfolios.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Portfolios;
			}
			set
			{
				this._Portfolios.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Transaction", Storage="_Transactions", ThisKey="Username", OtherKey="Username")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=17, EmitDefaultValue=false)]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				if ((this.serializing 
							&& (this._Transactions.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_WatchStock", Storage="_WatchStocks", ThisKey="Username", OtherKey="Username")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=18, EmitDefaultValue=false)]
		public EntitySet<WatchStock> WatchStocks
		{
			get
			{
				if ((this.serializing 
							&& (this._WatchStocks.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._WatchStocks;
			}
			set
			{
				this._WatchStocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Portfolios(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Portfolios(Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_WatchStocks(WatchStock entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_WatchStocks(WatchStock entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void Initialize()
		{
			this._Portfolios = new EntitySet<Portfolio>(new Action<Portfolio>(this.attach_Portfolios), new Action<Portfolio>(this.detach_Portfolios));
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._WatchStocks = new EntitySet<WatchStock>(new Action<WatchStock>(this.attach_WatchStocks), new Action<WatchStock>(this.detach_WatchStocks));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
}
#pragma warning restore 1591
